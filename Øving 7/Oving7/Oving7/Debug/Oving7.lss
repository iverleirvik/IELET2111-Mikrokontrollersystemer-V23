
Oving7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003542  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e60  00000000  00000000  000038ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004db  00000000  00000000  0000670e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00006bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000192b  00000000  00000000  00006ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000235  00000000  00000000  000085cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00008800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 17 01 	call	0x22e	; 0x22e <main>
 104:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <isTWIBad>:
}

bool isTWIBad(void)
{
	//Checks for: NACK, ARBLOST, BUSERR, Bus Busy
	if ((((TWI0.MSTATUS) & (TWI_RXACK_bm | TWI_ARBLOST_bm | TWI_BUSERR_bm)) > 0)
 10c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 110:	8c 71       	andi	r24, 0x1C	; 28
 112:	39 f4       	brne	.+14     	; 0x122 <isTWIBad+0x16>
	|| (TWI_IS_BUSBUSY()))
 114:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 118:	83 70       	andi	r24, 0x03	; 3
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	21 f4       	brne	.+8      	; 0x126 <isTWIBad+0x1a>
	{
		return true;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	08 95       	ret
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	08 95       	ret
	}
	return false;
 126:	80 e0       	ldi	r24, 0x00	; 0
}
 128:	08 95       	ret

0000012a <TWI_initHost>:

void TWI_initHost(void)
{
	//Standard 100kHz TWI, 4 Cycle Hold, 50ns SDA Hold Time
	TWI0.CTRLA = TWI_SDAHOLD_50NS_gc;
 12a:	e0 e0       	ldi	r30, 0x00	; 0
 12c:	f9 e0       	ldi	r31, 0x09	; 9
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	80 83       	st	Z, r24
	
	//Clear Dual Control
	TWI0.DUALCTRL = 0x00;
 132:	11 82       	std	Z+1, r1	; 0x01
	
	//Enable Run in Debug
	TWI0.DBGCTRL = TWI_DBGRUN_bm;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	82 83       	std	Z+2, r24	; 0x02
	
	//Clear MSTATUS (write 1 to flags). BUSSTATE set to idle
	TWI0.MSTATUS = TWI_RIF_bm | TWI_WIF_bm | TWI_CLKHOLD_bm | TWI_RXACK_bm |
 138:	9d ef       	ldi	r25, 0xFD	; 253
 13a:	95 83       	std	Z+5, r25	; 0x05
	TWI_ARBLOST_bm | TWI_BUSERR_bm | TWI_BUSSTATE_IDLE_gc;
	
	//Set for 100kHz from a 4MHz oscillator
	TWI0.MBAUD = 15;
 13c:	9f e0       	ldi	r25, 0x0F	; 15
 13e:	96 83       	std	Z+6, r25	; 0x06
	
	//[No ISRs] and Host Mode
	TWI0.MCTRLA = TWI_ENABLE_bm;
 140:	83 83       	std	Z+3, r24	; 0x03
 142:	08 95       	ret

00000144 <TWI_initPins>:
void TWI_initPins(void)
{
	//PA2/PA3
	
	//Output I/O
	PORTA.DIRSET = PIN2_bm | PIN3_bm;
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f4 e0       	ldi	r31, 0x04	; 4
 148:	8c e0       	ldi	r24, 0x0C	; 12
 14a:	81 83       	std	Z+1, r24	; 0x01
	//Enable Pull-Ups
	PORTA.PINCONFIG = PORT_PULLUPEN_bm;
	#endif

	//Select RA2/RA3
	PORTA.PINCTRLUPD = PIN2_bm | PIN3_bm;
 14c:	84 87       	std	Z+12, r24	; 0x0c
 14e:	08 95       	ret

00000150 <_startTWI>:
}

bool _startTWI(uint8_t addr, bool read)
{
	//If the Bus is Busy
	if (TWI_IS_BUSBUSY())
 150:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 154:	93 70       	andi	r25, 0x03	; 3
 156:	93 30       	cpi	r25, 0x03	; 3
 158:	01 f1       	breq	.+64     	; 0x19a <_startTWI+0x4a>
	{
		return false;
	}
	
	//Send Address
	TWI0.MADDR = (addr << 1) | read;
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	86 2b       	or	r24, r22
 162:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	
	//Wait...
	TWI_WAIT();
 166:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 16a:	85 fd       	sbrc	r24, 5
 16c:	0d c0       	rjmp	.+26     	; 0x188 <_startTWI+0x38>
 16e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 172:	82 fd       	sbrc	r24, 2
 174:	09 c0       	rjmp	.+18     	; 0x188 <_startTWI+0x38>
 176:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 17a:	83 fd       	sbrc	r24, 3
 17c:	05 c0       	rjmp	.+10     	; 0x188 <_startTWI+0x38>
 17e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 182:	83 70       	andi	r24, 0x03	; 3
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	79 f7       	brne	.-34     	; 0x166 <_startTWI+0x16>
	
	if (isTWIBad())
 188:	0e 94 86 00 	call	0x10c	; 0x10c <isTWIBad>
 18c:	88 23       	and	r24, r24
 18e:	39 f0       	breq	.+14     	; 0x19e <_startTWI+0x4e>
	{
		//Stop the Bus
		TWI0.MCTRLB = TWI_MCMD_STOP_gc;
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
		return false;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
bool _startTWI(uint8_t addr, bool read)
{
	//If the Bus is Busy
	if (TWI_IS_BUSBUSY())
	{
		return false;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
		TWI0.MCTRLB = TWI_MCMD_STOP_gc;
		return false;
	}
	
	//TWI Started
	return true;
 19e:	81 e0       	ldi	r24, 0x01	; 1
}
 1a0:	08 95       	ret

000001a2 <_writeToTWI>:

//Internal Function: Write len bytes to TWI. Does NOT STOP the bus. Returns true if successful
bool _writeToTWI(uint8_t* data, uint8_t len)
{
 1a2:	ac 01       	movw	r20, r24
	uint8_t count = 0;
 1a4:	20 e0       	ldi	r18, 0x00	; 0
	
	while (count < len)
 1a6:	26 c0       	rjmp	.+76     	; 0x1f4 <_writeToTWI+0x52>
	{
		//Write a byte
		TWI0.MDATA = data[count];
 1a8:	fa 01       	movw	r30, r20
 1aa:	e2 0f       	add	r30, r18
 1ac:	f1 1d       	adc	r31, r1
 1ae:	90 81       	ld	r25, Z
 1b0:	90 93 08 09 	sts	0x0908, r25	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
		//Wait...
		TWI_WAIT();
 1b4:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 1b8:	95 fd       	sbrc	r25, 5
 1ba:	0d c0       	rjmp	.+26     	; 0x1d6 <_writeToTWI+0x34>
 1bc:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 1c0:	92 fd       	sbrc	r25, 2
 1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <_writeToTWI+0x34>
 1c4:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 1c8:	93 fd       	sbrc	r25, 3
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <_writeToTWI+0x34>
 1cc:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 1d0:	93 70       	andi	r25, 0x03	; 3
 1d2:	93 30       	cpi	r25, 0x03	; 3
 1d4:	79 f7       	brne	.-34     	; 0x1b4 <_writeToTWI+0x12>
		
		//If the client NACKed, then abort the write
		if (CLIENT_NACK())
 1d6:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 1da:	94 fd       	sbrc	r25, 4
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <_writeToTWI+0x5a>
		{
			return false;
		}
		else if(CLIENT_ACK())	{
 1de:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 1e2:	94 fd       	sbrc	r25, 4
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <_writeToTWI+0x52>
			count++;
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
			PORTE.OUT ^= PIN1_bm;
 1e8:	e0 e8       	ldi	r30, 0x80	; 128
 1ea:	f4 e0       	ldi	r31, 0x04	; 4
 1ec:	94 81       	ldd	r25, Z+4	; 0x04
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	89 27       	eor	r24, r25
 1f2:	84 83       	std	Z+4, r24	; 0x04
//Internal Function: Write len bytes to TWI. Does NOT STOP the bus. Returns true if successful
bool _writeToTWI(uint8_t* data, uint8_t len)
{
	uint8_t count = 0;
	
	while (count < len)
 1f4:	26 17       	cp	r18, r22
 1f6:	c0 f2       	brcs	.-80     	; 0x1a8 <_writeToTWI+0x6>
		
		//Increment the counter
		//count++;
	}
	
	return true;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret
		TWI_WAIT();
		
		//If the client NACKed, then abort the write
		if (CLIENT_NACK())
		{
			return false;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
		//Increment the counter
		//count++;
	}
	
	return true;
}
 1fe:	08 95       	ret

00000200 <TWI_sendByte>:

bool TWI_sendByte(uint8_t addr, uint8_t data)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	1f 92       	push	r1
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	69 83       	std	Y+1, r22	; 0x01
	//Address Client Device (Write)
	if (!_startTWI(addr, TWI_WRITE))
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	0e 94 a8 00 	call	0x150	; 0x150 <_startTWI>
 212:	88 23       	and	r24, r24
 214:	41 f0       	breq	.+16     	; 0x226 <TWI_sendByte+0x26>
	return false;
	
	bool success = _writeToTWI(&data, 1);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	ce 01       	movw	r24, r28
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_writeToTWI>
	
	//Stop the bus
	TWI0.MCTRLB = TWI_MCMD_STOP_gc;
 220:	93 e0       	ldi	r25, 0x03	; 3
 222:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
	
	return success;
}
 226:	0f 90       	pop	r0
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <main>:
bool TWI_sendByte(uint8_t addr, uint8_t data);
bool TWI_sendBytes(uint8_t addr, uint8_t* data, uint8_t len);

int main(void)	{
	
	TWI_initHost();
 22e:	0e 94 95 00 	call	0x12a	; 0x12a <TWI_initHost>
	TWI_initPins();
 232:	0e 94 a2 00 	call	0x144	; 0x144 <TWI_initPins>
	
	PORTE.DIRSET = PIN1_bm;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <__TEXT_REGION_LENGTH__+0x7e0481>
	
	TWI_sendByte(I2C_SLAVE_ADDRESS, 1);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	8d e4       	ldi	r24, 0x4D	; 77
 240:	0e 94 00 01 	call	0x200	; 0x200 <TWI_sendByte>
	return 0;
}
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	08 95       	ret

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
