
Oving6_3_b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d5b  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e67  00000000  00000000  00004007  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d3  00000000  00000000  00006e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00007244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000020f4  00000000  00000000  000072a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  0000939c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 c4 00 	call	0x188	; 0x188 <main>
 104:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <tca0_init>:
		TCA0.SINGLE.CMP0BUF = ADC0_read();
    }
}

void tca0_init(void)	{
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
	TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm	|	TCA_SINGLE_WGMODE_DSBOTTOM_gc;
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	fa e0       	ldi	r31, 0x0A	; 10
 116:	87 e1       	ldi	r24, 0x17	; 23
 118:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.EVCTRL &= ~(TCA_SINGLE_CNTAEI_bm);
 11a:	81 85       	ldd	r24, Z+9	; 0x09
 11c:	8e 7f       	andi	r24, 0xFE	; 254
 11e:	81 87       	std	Z+9, r24	; 0x09
	TCA0.SINGLE.PERBUF = 0x02EE;	//0x01F4; Periode
 120:	8e ee       	ldi	r24, 0xEE	; 238
 122:	92 e0       	ldi	r25, 0x02	; 2
 124:	86 ab       	std	Z+54, r24	; 0x36
 126:	97 ab       	std	Z+55, r25	; 0x37
	TCA0.SINGLE.CMP0BUF = 0x2710;	// Duty cycle
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	97 e2       	ldi	r25, 0x27	; 39
 12c:	80 af       	std	Z+56, r24	; 0x38
 12e:	91 af       	std	Z+57, r25	; 0x39
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV4_gc	|	TCA_SINGLE_ENABLE_bm;
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <led_init>:
	}

void led_init(void)	{
	PORTD.DIR |= PIN0_bm;
 136:	e0 e6       	ldi	r30, 0x60	; 96
 138:	f4 e0       	ldi	r31, 0x04	; 4
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <ADC0_init>:
}

void ADC0_init(void)
{
	/* Disable digital input buffer */
	PORTD.PIN4CTRL &= ~PORT_ISC_gm;
 142:	e0 e6       	ldi	r30, 0x60	; 96
 144:	f4 e0       	ldi	r31, 0x04	; 4
 146:	84 89       	ldd	r24, Z+20	; 0x14
 148:	88 7f       	andi	r24, 0xF8	; 248
 14a:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN4CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 14c:	84 89       	ldd	r24, Z+20	; 0x14
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	84 8b       	std	Z+20, r24	; 0x14
	
	/* Disable pull-up resistor */
	PORTD.PIN4CTRL &= ~PORT_PULLUPEN_bm;
 152:	84 89       	ldd	r24, Z+20	; 0x14
 154:	87 7f       	andi	r24, 0xF7	; 247
 156:	84 8b       	std	Z+20, r24	; 0x14

	ADC0.CTRLC = ADC_PRESC_DIV4_gc	/* CLK_PER divided by 4 */
 158:	e0 e0       	ldi	r30, 0x00	; 0
 15a:	f6 e0       	ldi	r31, 0x06	; 6
 15c:	85 e0       	ldi	r24, 0x05	; 5
 15e:	82 83       	std	Z+2, r24	; 0x02
	| VREF_REFSEL_VDD_gc ;   /* VDD as reference */
	
	
	ADC0.CTRLA = ADC_ENABLE_bm          /* ADC Enable: enabled */
 160:	80 83       	st	Z, r24
	| ADC_RESSEL_10BIT_gc;   /* 10-bit mode */
	
	/* Select ADC channel */
	ADC0.MUXPOS  = ADC_MUXPOS_AIN4_gc;
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	80 87       	std	Z+8, r24	; 0x08
	
	/* Enable FreeRun mode */
	ADC0.CTRLA |= ADC_FREERUN_bm;
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <ADC0_read>:
}

uint16_t ADC0_read(void)
{
	/* Start ADC conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
 16e:	e0 e0       	ldi	r30, 0x00	; 0
 170:	f6 e0       	ldi	r31, 0x06	; 6
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	82 87       	std	Z+10, r24	; 0x0a
	
	/* Wait until ADC conversion done */
	if ( (ADC0.INTFLAGS & ADC_RESRDY_bm) )
 176:	85 85       	ldd	r24, Z+13	; 0x0d
 178:	80 ff       	sbrs	r24, 0
 17a:	05 c0       	rjmp	.+10     	; 0x186 <ADC0_read+0x18>
	{
		ADC0.INTFLAGS = ADC_RESRDY_bm;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	85 87       	std	Z+13, r24	; 0x0d
		
		return ADC0.RES;
 180:	80 89       	ldd	r24, Z+16	; 0x10
 182:	91 89       	ldd	r25, Z+17	; 0x11
 184:	08 95       	ret
	
	/* Clear the interrupt flag by writing 1: */
	//ADC0.INTFLAGS = ADC_RESRDY_bm;
	
	//return ADC0.RES;
}
 186:	08 95       	ret

00000188 <main>:
void ADC0_init(void);
uint16_t ADC0_read();

int main(void)
{
	tca0_init();
 188:	0e 94 86 00 	call	0x10c	; 0x10c <tca0_init>
	led_init();
 18c:	0e 94 9b 00 	call	0x136	; 0x136 <led_init>
	
	ADC0_init();
 190:	0e 94 a1 00 	call	0x142	; 0x142 <ADC0_init>
	
	
    /* Replace with your application code */
    while (1) 
    {
		TCA0.SINGLE.CMP0BUF = ADC0_read();
 194:	0e 94 b7 00 	call	0x16e	; 0x16e <ADC0_read>
 198:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7e0a38>
 19c:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7e0a39>
 1a0:	f9 cf       	rjmp	.-14     	; 0x194 <main+0xc>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
